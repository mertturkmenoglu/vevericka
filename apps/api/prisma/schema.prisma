generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AuthProvider {
  GOOGLE
  DISCORD
  SPOTIFY
}

model Auth {
  sub       String
  type      AuthProvider
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@id([sub, type])
}

model User {
  id                 String          @id @default(uuid())
  name               String          @db.VarChar(64)
  email              String          @db.VarChar(255)
  image              String          @default("profile.png") @db.VarChar(512)
  job                String?         @db.VarChar(64)
  twitterHandle      String?         @db.VarChar(64)
  school             String?         @db.VarChar(64)
  birthDate          DateTime?
  website            String?         @db.VarChar(255)
  description        String?         @db.VarChar(255)
  verified           Boolean         @default(false)
  protected          Boolean         @default(false)
  bannerImage        String          @default("banner.png")
  gender             String?         @db.VarChar(32)
  city               String?         @db.VarChar(64)
  country            String?         @db.VarChar(64)
  auth               Auth?
  posts              Post[]          @relation(name: "UserPosts")
  likes              Post[]          @relation(name: "UserLikes")
  dislikes           Post[]          @relation(name: "UserDislikes")
  followers          User[]          @relation("UserFollows")
  following          User[]          @relation("UserFollows")
  bookmarks          Bookmark[]      @relation("UserBookmarks")
  seenStories        Story[]         @relation("UserSeenStories")
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  stories            Story[]
  followRequests     FollowRequest[] @relation(name: "UserFollowRequestsFrom")
  sentFollowRequests FollowRequest[] @relation(name: "UserFollowRequestsTo")
  pollVotes          PollVote[]
}

model Post {
  id        String      @id @default(uuid())
  content   String      @db.VarChar(255)
  user      User        @relation(name: "UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  dislikes  User[]      @relation(name: "UserDislikes")
  likes     User[]      @relation(name: "UserLikes")
  tags      Tag[]       @relation(name: "PostTags")
  images    PostImage[] @relation(name: "PostImages")
  videos    PostVideo[] @relation(name: "PostVideos")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Bookmark  Bookmark[]
  poll      Poll?

  @@index([userId])
}

model FollowRequest {
  id     String @id @default(uuid())
  from   User   @relation(name: "UserFollowRequestsFrom", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String
  to     User   @relation(name: "UserFollowRequestsTo", fields: [toId], references: [id], onDelete: Cascade)
  toId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(uuid())
  tagName   String   @unique @db.VarChar(254)
  posts     Post[]   @relation(name: "PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(tagName)
}

model PostImage {
  id        String   @id @default(uuid())
  url       String
  post      Post     @relation(name: "PostImages", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model PostVideo {
  id        String   @id @default(uuid())
  url       String
  post      Post     @relation(name: "PostVideos", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(name: "UserBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Story {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  seenBy User[] @relation(name: "UserSeenStories")

  duration Int

  source String

  endsAt    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Poll {
  id        String     @id @default(uuid())
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String     @unique
  name      String
  endsAt    DateTime
  choices   Json
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  votes     PollVote[]
}

model PollVote {
  id        String   @id @default(uuid())
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  choiceId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
