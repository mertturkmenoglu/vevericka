generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AuthProvider {
  GOOGLE
  TWITTER
  GITHUB
  DISCORD
  SPOTIFY
}

model Auth {
  sub       String
  type      AuthProvider
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@id([sub, type])
}

model User {
  id            String     @id @default(uuid())
  name          String     @db.VarChar(64)
  image         String     @default("profile.png") @db.VarChar(512)
  job           String?    @db.VarChar(64)
  twitterHandle String?    @db.VarChar(64)
  school        String?    @db.VarChar(64)
  birthDate     DateTime?
  website       String?    @db.VarChar(255)
  description   String?    @db.VarChar(255)
  verified      Boolean    @default(false)
  protected     Boolean    @default(false)
  bannerImage   String     @default("banner.png")
  gender        String?    @db.VarChar(32)
  city          String?    @db.VarChar(64)
  country       String?    @db.VarChar(64)
  auth          Auth?
  posts         Post[]     @relation(name: "UserPosts")
  likes         Post[]     @relation(name: "UserLikes")
  dislikes      Post[]     @relation(name: "UserDislikes")
  followers     User[]     @relation("UserFollows")
  following     User[]     @relation("UserFollows")
  bookmarks     Bookmark[] @relation("UserBookmarks")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Post {
  id        String      @id @default(uuid())
  content   String      @db.VarChar(255)
  user      User        @relation(name: "UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  dislikes  User[]      @relation(name: "UserDislikes")
  likes     User[]      @relation(name: "UserLikes")
  tags      Tag[]       @relation(name: "PostTags")
  images    PostImage[] @relation(name: "PostImages")
  videos    PostVideo[] @relation(name: "PostVideos")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Bookmark  Bookmark[]

  @@index([userId])
}

model Tag {
  id        String   @id @default(uuid())
  tagName   String   @unique @db.VarChar(254)
  posts     Post[]   @relation(name: "PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(tagName)
}

model PostImage {
  id        String   @id @default(uuid())
  url       String
  post      Post     @relation(name: "PostImages", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model PostVideo {
  id        String   @id @default(uuid())
  url       String
  post      Post     @relation(name: "PostVideos", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(name: "UserBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}
