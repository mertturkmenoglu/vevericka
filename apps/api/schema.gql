# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Shard {
  total: Float!
  successful: Float!
  skipped: Float
  failed: Float!
}

"""user"""
type User {
  id: String!
  name: String!
  email: String!
  image: String!
  job: String
  twitterHandle: String
  school: String
  birthDate: String
  website: String
  description: String
  verified: Boolean!
  protected: Boolean!
  banner: String!
  gender: String
  location: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Post Tag"""
type PostTag {
  id: String!
  tagId: String!
  tag: String!
  start: Float!
  end: Float!
}

"""Post Url"""
type PostUrl {
  id: String!
  url: String!
  start: Float!
  end: Float!
  meta: String!
  linkPreview: PostLinkPreview
}

"""Post Link Preview"""
type PostLinkPreview {
  id: String!
  urlId: String!
}

"""Post Mention"""
type PostMention {
  id: String!
  mention: String!
  mentionedUserId: String
  mentionedUser: User
  start: Float!
  end: Float!
}

"""Post Attachment"""
type PostAttachment {
  id: String!
  type: String!
  url: String!
  width: Float
  height: Float
  duration: Float
  order: Float!
}

"""Post Poll Option"""
type PostPollOption {
  id: String!
  option: String!
  order: Float!
}

"""Post Poll"""
type PostPoll {
  id: String!
  start: DateTime!
  end: DateTime!
  options: [PostPollOption!]!
}

"""post"""
type Post {
  id: String!
  content: String
  source: String
  location: String
  sensitive: Boolean!
  referenceId: String
  reference: Post
  referenceType: String
  replySetting: String!
  userId: String
  user: User!
  tags: [PostTag!]!
  poll: PostPoll
  attachments: [PostAttachment!]!
  mentions: [PostMention!]!
  urls: [PostUrl!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostHit {
  _index: String!
  _id: String!
  _score: Float
  _source: Post!
}

type PostTopLevelHits {
  max_score: Float
  hits: [PostHit!]!
}

type PostResult {
  took: Float!
  timed_out: Boolean!
  _shards: Shard!
  hits: PostTopLevelHits!
}

type UserHit {
  _index: String!
  _id: String!
  _score: Float
  _source: User!
}

type UserTopLevelHits {
  max_score: Float
  hits: [UserHit!]!
}

type UserResult {
  took: Float!
  timed_out: Boolean!
  _shards: Shard!
  hits: UserTopLevelHits!
}

"""Bookmark"""
type Bookmark {
  id: String!
  post: Post!
}

"""tag"""
type Tag {
  id: String!
  tag: String!
}

"""Popular Tag"""
type PopularTag {
  id: String!
  tag: String!
  count: Float!
}

"""feed"""
type Feed {
  posts: [Post!]!
}

"""Link Preview Model"""
type LinkPreview {
  title: String
  description: String
  image: String
  url: String
}

type LastSeen {
  id: String!
  date: String!
}

"""UserCount"""
type UserCount {
  followers: Float!
  following: Float!
  posts: Float!
}

"""ProfileMeta"""
type ProfileMeta {
  isMe: Boolean!
  isFollowing: Boolean!
  hasPendingFollowRequest: Boolean!
  count: UserCount!
}

"""ProfileDescriptionTag"""
type ProfileDescriptionTag {
  id: String!
  userId: String!
  tagId: String!
  start: Float!
  end: Float!
}

"""ProfileDescriptionUrl"""
type ProfileDescriptionUrl {
  id: String!
  userId: String!
  start: Float!
  end: Float!
  meta: String!
  url: String!
}

"""ProfileDescriptionMention"""
type ProfileDescriptionMention {
  id: String!
  userId: String!
  start: Float!
  end: Float!
  mention: String!
  mentionedUserId: String
}

"""ProfileDescription"""
type ProfileDescription {
  description: String
  tags: [ProfileDescriptionTag!]!
  urls: [ProfileDescriptionUrl!]!
  mentions: [ProfileDescriptionMention!]!
}

"""user"""
type Profile {
  id: String!
  name: String!
  email: String!
  image: String!
  job: String
  twitterHandle: String
  school: String
  birthDate: String
  website: String
  description: String
  verified: Boolean!
  protected: Boolean!
  banner: String!
  gender: String
  location: String
  createdAt: DateTime!
  updatedAt: DateTime!
  descriptionMeta: ProfileDescription!
  meta: ProfileMeta!
}

type Query {
  searchPosts: PostResult!
  searchUsers: UserResult!
  bookmark(id: String!): Bookmark!
  bookmarks(skip: Int! = 0, take: Int! = 25): [Bookmark!]!
  tags(skip: Int! = 0, take: Int! = 25): [Tag!]!
  popularTags(skip: Int! = 0, take: Int! = 25): [PopularTag!]!
  feed(skip: Int! = 0, take: Int! = 25): Feed!
  linkPreview(url: String!): LinkPreview!
  post(id: String!): Post!
  posts(id: String!, skip: Int! = 0, take: Int! = 25): [Post!]!
  postsByTag(tag: String!, skip: Int! = 0, take: Int! = 25): [Post!]!
  me: User!
  user(id: String!): User!
  profile(id: String!): Profile!
}

type Mutation {
  updateSearchIndices: String!
  createBookmark(newBookmarkData: NewBookmarkInput!): Bookmark!
  addOrRemoveBookmark(postId: String!): Bookmark!
  createPost(newPostData: NewPostInput!): Post!
  votePost(id: String!, vote: String!): Post!
  deletePost(id: String!): Post
  bulkCreatePosts(payload: BulkCreatePostsInput!): String!
  updateLastSeen: String!
}

input NewBookmarkInput {
  postId: String!
}

input NewPostInput {
  content: String!
  imageUrls: [String!]!
  videoUrls: [String!]!
}

input BulkCreatePostsInput {
  posts: [NewPostInput!]!
}

type Subscription {
  lastSeen: LastSeen!
}