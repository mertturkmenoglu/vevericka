# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Shard {
  total: Float!
  successful: Float!
  skipped: Float
  failed: Float!
}

"""Count"""
type Count {
  dislikes: Float!
  likes: Float!
  tags: Float!
}

"""Tag Count"""
type TagCount {
  posts: Float!
}

"""tag"""
type Tag {
  id: String!
  tagName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Popular Tag"""
type PopularTag {
  id: String!
  tagName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: TagCount!
}

"""user"""
type User {
  id: String!
  name: String!
  email: String!
  image: String!
  job: String
  twitterHandle: String
  school: String
  birthDate: DateTime
  website: String
  description: String
  verified: Boolean!
  protected: Boolean!
  bannerImage: String!
  gender: String
  city: String
  country: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""PostImage"""
type PostImage {
  id: String!
  url: String!
  postId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""PostVideo"""
type PostVideo {
  id: String!
  url: String!
  postId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""post"""
type Post {
  id: String!
  content: String!
  user: User!
  tags: [Tag!]!
  images: [PostImage!]!
  videos: [PostVideo!]!
  vote: String!
  _count: Count!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostHit {
  _index: String!
  _id: String!
  _score: Float
  _source: Post!
}

type PostTopLevelHits {
  max_score: Float
  hits: [PostHit!]!
}

type PostResult {
  took: Float!
  timed_out: Boolean!
  _shards: Shard!
  hits: PostTopLevelHits!
}

type UserHit {
  _index: String!
  _id: String!
  _score: Float
  _source: User!
}

type UserTopLevelHits {
  max_score: Float
  hits: [UserHit!]!
}

type UserResult {
  took: Float!
  timed_out: Boolean!
  _shards: Shard!
  hits: UserTopLevelHits!
}

"""Bookmark"""
type Bookmark {
  id: String!
  post: Post!
}

"""feed"""
type Feed {
  posts: [Post!]!
}

"""Link Preview Model"""
type LinkPreview {
  title: String
  description: String
  image: String
  url: String
}

type Story {
  id: String!
  user: User!
  duration: Int!
  source: String!
  seen: Boolean!
  endsAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoryFeedElement {
  user: User!
  stories: [Story!]!
  hasSeenAll: Boolean!
}

type LastSeen {
  id: String!
  date: String!
}

"""UserCount"""
type UserCount {
  followers: Float!
  following: Float!
  posts: Float!
}

"""user"""
type Profile {
  id: String!
  name: String!
  email: String!
  image: String!
  job: String
  twitterHandle: String
  school: String
  birthDate: DateTime
  website: String
  description: String
  verified: Boolean!
  protected: Boolean!
  bannerImage: String!
  gender: String
  city: String
  country: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCount!
  isFollowing: Boolean!
  hasPendingFollowRequest: Boolean!
  isMe: Boolean!
}

type Query {
  searchPosts(term: String!, skip: Int! = 0, take: Int! = 25): PostResult!
  searchUsers(term: String!, skip: Int! = 0, take: Int! = 25): UserResult!
  post(id: String!): Post!
  posts(id: String!, skip: Int! = 0, take: Int! = 25): [Post!]!
  postsByTag(tag: String!, skip: Int! = 0, take: Int! = 25): [Post!]!
  me: User!
  user(id: String!): User!
  profile(id: String!): Profile!
  feed(skip: Int! = 0, take: Int! = 25): Feed!
  tags(skip: Int! = 0, take: Int! = 25): [Tag!]!
  popularTags(skip: Int! = 0, take: Int! = 25): [PopularTag!]!
  bookmark(id: String!): Bookmark!
  bookmarks(skip: Int! = 0, take: Int! = 25): [Bookmark!]!
  linkPreview(url: String!): LinkPreview!
  story(id: String!): Story!
  stories(id: String!): [Story!]!
  storyFeed: [StoryFeedElement!]!
}

type Mutation {
  updateSearchIndices: String!
  createPost(newPostData: NewPostInput!): Post!
  votePost(id: String!, vote: String!): Post!
  deletePost(id: String!): Post
  bulkCreatePosts(payload: BulkCreatePostsInput!): String!
  interactWithUser(id: String!, interaction: String!): String!
  updateUser(payload: UpdateUserInput!): User!
  updateLastSeen: String!
  createBookmark(newBookmarkData: NewBookmarkInput!): Bookmark!
  addOrRemoveBookmark(postId: String!): Bookmark!
  createStory(payload: CreateStoryInput!): Story!
  deleteStory(id: String!): Story!
  markStoryAsSeen(id: String!): Story!
}

input NewPostInput {
  content: String!
  imageUrls: [String!]!
  videoUrls: [String!]!
}

input BulkCreatePostsInput {
  posts: [NewPostInput!]!
}

input UpdateUserInput {
  name: String
  image: String
  job: String
  twitterHandle: String
  school: String
  birthDate: DateTime
  website: String
  description: String
  protected: Boolean
  bannerImage: String
  city: String
  country: String
  gender: String
}

input NewBookmarkInput {
  postId: String!
}

input CreateStoryInput {
  source: String!
  duration: Float!
  endsAt: DateTime!
}

type Subscription {
  lastSeen: LastSeen!
}